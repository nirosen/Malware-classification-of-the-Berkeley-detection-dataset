import torch
import torch.nn.utils as utils


def pack_sequence_tensor(batch_sequences):
    packed_sequence_tensor = utils.rnn.pack_sequence(batch_sequences)
    return packed_sequence_tensor


def get_sequence_length(sequence):
    return sequence.Length


def split_dataset(sequences, train_percent, valid_percent, test_portion):
    if train_percent + valid_percent + test_portion != 1:
        raise Exception("Invalid split portion.")

    train_size = int(train_percent * len(sequences))
    valid_size = int(valid_percent * len(sequences))
    test_size = len(sequences) - train_size - valid_size
    train_dataset, valid_dataset, test_dataset = torch.utils.data.random_split(sequences, [train_size, valid_size, test_size])

    train = sorted([sequence for sequence in train_dataset], key=get_sequence_length, reverse=True)
    valid = sorted([sequence for sequence in valid_dataset], key=get_sequence_length, reverse=True)
    test = sorted([sequence for sequence in test_dataset], key=get_sequence_length, reverse=True)

    return train, valid, test