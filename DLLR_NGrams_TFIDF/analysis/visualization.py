import matplotlib.pyplot as plt
import os

def get_epoch_iterations(result_values):
    iterations = []
    iteration = 0 # TODO: maybe start from 1? so first epoch will be "1" and not "0"
    for value in result_values:
        iterations.append(iteration)
        iteration += 1
    return iterations


def plot_simple_loss_graph(result_values, x_label, y_label, title, output_dir):
    plt.clf()
    epochs = get_epoch_iterations(result_values)
    plt.plot(epochs, result_values)
    plt.xlim([0, len(epochs) - 1])
    plt.ylim([min(result_values) - 0.1, max(result_values) + 0.1])
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    plt.title(title)
    plt.savefig(os.path.join(output_dir, (title + ".png")))
    plt.show()


def plot_metrics_graph(result_values, x_label, y_label, title, output_dir):
    plt.clf()
    epochs = get_epoch_iterations(result_values)
    precision = [value[0] for value in result_values]
    recall = [value[1] for value in result_values]
    auc = [value[2] for value in result_values]
    fig, ax = plt.subplots()
    ax.plot(epochs, precision, marker='*', color='red', linewidth=2, label='Precision')
    ax.plot(epochs, recall, marker='*', color='green', linewidth=2, label='Recall')
    ax.plot(epochs, auc, marker='*', color='blue', linewidth=2, label='AUC')
    plt.xlabel(x_label)
    plt.ylabel(y_label)
    ax.legend()
    ax.set_title(title)
    ax.yaxis.set_major_locator(plt.MaxNLocator(5))
    ax.xaxis.set_major_locator(plt.MaxNLocator(integer=True))
    plt.savefig(os.path.join(output_dir, (title + ".png")))
    plt.show()


def plot_roc_curve(fpr, tpr, auc, title):
    plt.clf()
    plt.plot([0, 1], [0, 1], linestyle='--', label='ROC Curve (area = %0.2f)' % auc)
    # plot the roc curve for the model
    plt.plot(fpr, tpr, marker='.')
    # set plot properties
    plt.xlim([0.0, 1.05])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title(title)
    plt.savefig(os.path.join(output_dir, (title + ".png")))
    # show the plot
    plt.show()


def plot_precision_recall_curve(recall, precision, title, output_dir):
    plt.clf()
    # plot the roc curve for the model
    plt.plot(recall, precision, marker='.', label='Precision Recall Curve')
    # set plot properties
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('Recall')
    plt.ylabel('Precision')
    plt.title(title)
    plt.savefig(os.path.join(output_dir, (title + ".png")))
    # show the plot
    plt.show()
